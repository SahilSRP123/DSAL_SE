#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

// Structure to represent a vertex in the graph
struct Vertex {
    int index;
    int weight;
};

// Function to find the minimum spanning tree using Prim's algorithm
void primMST(vector<vector<Vertex>>& graph, int V) {
    vector<int> parent(V, -1); // Store the parent of each vertex in MST
    vector<int> key(V, INT_MAX); // Store the key (minimum weight) of each vertex
    vector<bool> visited(V, false); // Keep track of visited vertices

    // Priority queue to select the vertex with minimum key
    priority_queue<Vertex, vector<Vertex>, greater<Vertex>> pq;

    // Start with the first vertex
    int startVertex = 0;
    pq.push({startVertex, 0});
    key[startVertex] = 0;

    while (!pq.empty()) {
        int u = pq.top().index;
        pq.pop();

        visited[u] = true;

        // Traverse all the adjacent vertices of u
        for (const Vertex& v : graph[u]) {
            if (!visited[v.index] && v.weight < key[v.index]) {
                parent[v.index] = u;
                key[v.index] = v.weight;
                pq.push(v);
            }
        }
    }

    // Print the minimum spanning tree
    cout << "Minimum Spanning Tree (MST):\n";
    for (int i = 1; i < V; i++) {
        cout << parent[i] << " - " << i << endl;
    }
}

int main() {
    int V, E;
    cout << "Enter the number of offices (vertices): ";
    cin >> V;
    cout << "Enter the number of phone lines (edges): ";
    cin >> E;

    vector<vector<Vertex>> graph(V);

    cout << "Enter the connections and costs for each phone line:\n";
    for (int i = 0; i < E; i++) {
        int u, v, w;
        cout << "Enter the office indices and cost for phone line " << i + 1 << ": ";
        cin >> u >> v >> w;

        // Add edge in both directions (undirected graph)
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});
    }

    // Find the minimum spanning tree using Prim's algorithm
    primMST(graph, V);

    return 0;
}
